import time
import threading
from locust.env import Environment
from locust.stats import stats_printer, stats_history
from locust.log import setup_logging
from locust.runners import LocalRunner

from locustfile import WebsiteUser  # substitua por sua classe de usuário

def worker(env, num_users, spawn_rate):
    env.runner.start(num_users, spawn_rate)
    while not env.runner.greenlet.ready():
        time.sleep(1)
    env.runner.quit()

def spawn_locusts(num_users, spawn_rate):
    # Configura o ambiente e os eventos de logging
    setup_logging("INFO", None)
    env = Environment(user_classes=[WebsiteUser])
    env.create_local_runner()

    # Inicia a thread de impressão de estatísticas
    stats_printer(env.stats)

    # Inicia a thread de gravação de estatísticas
    stats_history(env.runner)

    # Cria e inicia a thread de worker
    worker_thread = threading.Thread(target=worker, args=(env, num_users, spawn_rate))
    worker_thread.start()

    # Aguarda a conclusão da thread de worker
    worker_thread.join()

    # Imprime as estatísticas finais
    print(env.stats)

if __name__ == "__main__":
    num_users = 1
    while True:
        print(f"Executando teste de carga com {num_users} usuários...")
        spawn_locusts(num_users, 10)
        num_users += 1
        time.sleep(30)  # aguarda 30 segundos antes de iniciar o próximo teste
